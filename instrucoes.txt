# Sistema de Gest√£o Musical - Par√≥quia Boa Viagem
## Instru√ß√µes de Instala√ß√£o e Configura√ß√£o Local

### üîß Pr√©-requisitos
- Node.js 18+ instalado
- PostgreSQL instalado (ou conta no Supabase)
- Git instalado

### üì¶ Instala√ß√£o Local

1. **Clone o reposit√≥rio:**
```bash
git clone <url-do-repositorio>
cd sistema-gestao-musical
```

2. **Instale as depend√™ncias:**
```bash
npm install
```

3. **Configure as vari√°veis de ambiente:**
Crie um arquivo `.env` na raiz do projeto:
```
# Database (PostgreSQL local ou Supabase)
DATABASE_URL=postgresql://usuario:senha@localhost:5432/gestao_musical

# YouTube Data API v3
YOUTUBE_API_KEY=AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM

# Configura√ß√µes de autentica√ß√£o
JWT_SECRET=sua_chave_secreta_jwt_muito_segura_aqui
SESSION_SECRET=sua_chave_de_sessao_muito_segura_aqui

# Ambiente
NODE_ENV=development
PORT=5000
```

4. **Configure o banco de dados:**
```bash
# Criar o banco de dados (se usando PostgreSQL local)
createdb gestao_musical

# Executar as migra√ß√µes
npm run db:push

# Popular com dados iniciais
npm run seed
```

5. **Inicie a aplica√ß√£o:**
```bash
npm run dev
```

A aplica√ß√£o estar√° dispon√≠vel em: `http://localhost:5000`

### üîë Credenciais Iniciais
- **Email:** wijosi59@gmail.com
- **Senha:** 88928883

**‚ö†Ô∏è IMPORTANTE:** Altere essa senha ap√≥s o primeiro login!

---

## üåê Integra√ß√£o com Supabase

### 1. Criar Projeto no Supabase
1. Acesse [supabase.com](https://supabase.com)
2. Crie uma nova conta ou fa√ßa login
3. Clique em "New Project"
4. Escolha sua organiza√ß√£o
5. Defina nome do projeto: "gestao-musical-paroquia"
6. Defina uma senha para o banco
7. Escolha a regi√£o mais pr√≥xima (South America - S√£o Paulo)

### 2. Configurar Banco de Dados
1. No painel do Supabase, v√° em "SQL Editor"
2. Clique em "New Query"
3. Cole o SQL completo abaixo e execute:

```sql
-- ========================================
-- SCHEMA COMPLETO - SISTEMA GEST√ÉO MUSICAL
-- ========================================

-- Extens√µes necess√°rias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ========================================
-- TABELAS DE AUTENTICA√á√ÉO
-- ========================================

-- Tabela de usu√°rios para autentica√ß√£o
CREATE TABLE auth_users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    nome VARCHAR(255) NOT NULL,
    tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('admin', 'musico')),
    instrumento VARCHAR(100),
    telefone VARCHAR(20),
    foto TEXT,
    ativo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Tabela para tokens de recupera√ß√£o de senha
CREATE TABLE password_reset_tokens (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Tabela para sess√µes de usu√°rio
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL,
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    last_activity TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW()
);

-- ========================================
-- TABELAS PRINCIPAIS DO SISTEMA
-- ========================================

-- Tabela de usu√°rios legacy (compatibilidade)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL
);

-- Tabela de m√∫sicos
CREATE TABLE musicos (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    nome TEXT NOT NULL,
    funcao TEXT NOT NULL,
    disponivel BOOLEAN NOT NULL DEFAULT true,
    email TEXT,
    telefone TEXT,
    foto TEXT,
    observacoes_permanentes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de anota√ß√µes dos m√∫sicos
CREATE TABLE musico_anotacoes (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    musico_id UUID REFERENCES musicos(id) ON DELETE CASCADE NOT NULL,
    texto TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de sugest√µes dos m√∫sicos
CREATE TABLE musico_sugestoes (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    musico_id UUID REFERENCES musicos(id) ON DELETE CASCADE NOT NULL,
    texto TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'pendente' CHECK (status IN ('pendente', 'implementada', 'recusada')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de missas
CREATE TABLE missas (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    data DATE NOT NULL,
    horario TIME NOT NULL,
    tipo TEXT NOT NULL,
    observacoes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de relacionamento entre missas e m√∫sicos (escala√ß√£o)
CREATE TABLE missa_musicos (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    missa_id UUID REFERENCES missas(id) ON DELETE CASCADE NOT NULL,
    musico_id UUID REFERENCES musicos(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    UNIQUE(missa_id, musico_id)
);

-- Tabela de m√∫sicas das missas
CREATE TABLE musicas (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    missa_id UUID REFERENCES missas(id) ON DELETE CASCADE NOT NULL,
    nome TEXT NOT NULL,
    cantor TEXT,
    link_youtube TEXT,
    partitura TEXT,
    link_download TEXT,
    secao_liturgica TEXT NOT NULL,
    observacoes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela da biblioteca de m√∫sicas
CREATE TABLE biblioteca_musicas (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    nome TEXT NOT NULL,
    cantor TEXT,
    link_youtube TEXT,
    partitura TEXT,
    link_download TEXT,
    secao_liturgica TEXT,
    observacoes TEXT,
    youtube_video_id TEXT,
    thumbnail TEXT,
    duracao TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- ========================================
-- √çNDICES PARA PERFORMANCE
-- ========================================

-- √çndices autentica√ß√£o
CREATE INDEX idx_auth_users_email ON auth_users(email);
CREATE INDEX idx_auth_users_tipo ON auth_users(tipo);
CREATE INDEX idx_password_reset_tokens_user_id ON password_reset_tokens(user_id);
CREATE INDEX idx_user_sessions_user_id ON user_sessions(user_id);
CREATE INDEX idx_user_sessions_token ON user_sessions(token);

-- √çndices principais
CREATE INDEX idx_musicos_nome ON musicos(nome);
CREATE INDEX idx_musicos_funcao ON musicos(funcao);
CREATE INDEX idx_musicos_disponivel ON musicos(disponivel);
CREATE INDEX idx_musico_anotacoes_musico_id ON musico_anotacoes(musico_id);
CREATE INDEX idx_musico_sugestoes_musico_id ON musico_sugestoes(musico_id);
CREATE INDEX idx_musico_sugestoes_status ON musico_sugestoes(status);
CREATE INDEX idx_missas_data ON missas(data);
CREATE INDEX idx_missas_tipo ON missas(tipo);
CREATE INDEX idx_missa_musicos_missa_id ON missa_musicos(missa_id);
CREATE INDEX idx_missa_musicos_musico_id ON missa_musicos(musico_id);
CREATE INDEX idx_musicas_missa_id ON musicas(missa_id);
CREATE INDEX idx_musicas_secao_liturgica ON musicas(secao_liturgica);
CREATE INDEX idx_biblioteca_musicas_nome ON biblioteca_musicas(nome);
CREATE INDEX idx_biblioteca_musicas_secao_liturgica ON biblioteca_musicas(secao_liturgica);

-- ========================================
-- DADOS INICIAIS
-- ========================================

-- Administrador inicial (senha ser√° hasheada pela aplica√ß√£o)
-- Trocar para hash real: $2b$10$... gerado pela aplica√ß√£o
INSERT INTO auth_users (email, password, nome, tipo, ativo) VALUES 
('wijosi59@gmail.com', '$2b$10$placeholder_hash', 'Administrador', 'admin', true);

-- M√∫sico exemplo
INSERT INTO auth_users (email, password, nome, tipo, instrumento, telefone, ativo) VALUES 
('musico@paroquiaboaviagem.com', '$2b$10$placeholder_hash', 'M√∫sico Exemplo', 'musico', 'Viol√£o', '(31) 99999-9999', true);

-- ========================================
-- POLICIES DE SEGURAN√áA (RLS)
-- ========================================

-- Habilitar RLS nas tabelas principais
ALTER TABLE auth_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE musicos ENABLE ROW LEVEL SECURITY;
ALTER TABLE missas ENABLE ROW LEVEL SECURITY;
ALTER TABLE musicas ENABLE ROW LEVEL SECURITY;
ALTER TABLE biblioteca_musicas ENABLE ROW LEVEL SECURITY;

-- Policies b√°sicas (ajustar conforme necess√°rio)
CREATE POLICY "auth_users_policy" ON auth_users FOR ALL USING (true);
CREATE POLICY "musicos_policy" ON musicos FOR ALL USING (true);
CREATE POLICY "missas_policy" ON missas FOR ALL USING (true);
CREATE POLICY "musicas_policy" ON musicas FOR ALL USING (true);
CREATE POLICY "biblioteca_policy" ON biblioteca_musicas FOR ALL USING (true);
```

### 3. Configurar Vari√°veis de Ambiente no Supabase
1. No painel do Supabase, v√° em "Settings" > "Database"
2. Copie a "Connection string"
3. No seu `.env`, substitua DATABASE_URL pela URL do Supabase:
```
DATABASE_URL=postgresql://postgres:suasenha@db.xxxxxxxxxxxx.supabase.co:5432/postgres
```

### 4. Configurar API do YouTube
1. Acesse [Google Cloud Console](https://console.cloud.google.com)
2. Crie um novo projeto ou selecione existente
3. Ative a "YouTube Data API v3"
4. Crie credenciais (API Key)
5. Use a chave fornecida: `AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM`

---

## üöÄ Comandos √öteis

```bash
# Desenvolvimento
npm run dev              # Inicia servidor de desenvolvimento
npm run build           # Build para produ√ß√£o
npm run start           # Inicia servidor de produ√ß√£o

# Banco de dados
npm run db:push         # Aplica mudan√ßas no schema
npm run db:studio       # Interface visual do banco
npm run seed            # Popula dados iniciais

# Utilit√°rios
npm run lint            # Verifica c√≥digo
npm run type-check      # Verifica tipos TypeScript
```

---

## üîß Configura√ß√µes Importantes

### API Keys e Secrets
- **YouTube API Key:** `AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM`
- **JWT_SECRET:** Gere uma chave segura para produ√ß√£o
- **SESSION_SECRET:** Gere uma chave segura para sess√µes

### Recursos Externos Integrados
- **YouTube Data API v3:** Busca de v√≠deos e metadados
- **Cifras e Partituras Goi√¢nia:** Busca autom√°tica de partituras
- **CNV MP3:** Convers√£o de v√≠deos YouTube para MP3

### Funcionalidades Principais
- ‚úÖ Sistema de autentica√ß√£o completo
- ‚úÖ Gest√£o de m√∫sicos e escalas
- ‚úÖ Biblioteca de m√∫sicas com busca inteligente
- ‚úÖ Integra√ß√£o YouTube para busca de v√≠deos
- ‚úÖ Sistema de partituras (texto e links)
- ‚úÖ Relat√≥rios e hist√≥rico
- ‚úÖ Interface administrativa

---

## üõ†Ô∏è Troubleshooting

### Problema: Erro de conex√£o com banco
**Solu√ß√£o:** Verifique se a DATABASE_URL est√° correta e o banco est√° acess√≠vel

### Problema: API do YouTube n√£o funciona
**Solu√ß√£o:** Verifique se a YOUTUBE_API_KEY est√° configurada corretamente

### Problema: Erro de autentica√ß√£o
**Solu√ß√£o:** Verifique se JWT_SECRET e SESSION_SECRET est√£o configurados

### Problema: Migra√ß√µes n√£o aplicam
**Solu√ß√£o:** Execute `npm run db:push` manualmente

---

### üîß Configura√ß√µes Importantes

### API Keys e Secrets
- **YouTube API Key:** `AIzaSyB4UJR8RSCxKjcMFwUD7vdTJRGd5ADVrQM`
- **JWT_SECRET:** Gere uma chave segura para produ√ß√£o
- **SESSION_SECRET:** Gere uma chave segura para sess√µes

### Recursos Externos Integrados
- **YouTube Data API v3:** Busca de v√≠deos e metadados
- **Cifras e Partituras Goi√¢nia:** Busca autom√°tica de partituras (https://arquidiocesegoiania.org.br/cifras-e-partituras/)
- **CNV MP3:** Convers√£o de v√≠deos YouTube para MP3 (https://cnvmp3.com/v25/)

### Funcionalidades Principais
- ‚úÖ Sistema de autentica√ß√£o completo
- ‚úÖ Gest√£o de m√∫sicos e escalas
- ‚úÖ Biblioteca de m√∫sicas com busca inteligente
- ‚úÖ Integra√ß√£o YouTube para busca de v√≠deos
- ‚úÖ Sistema de partituras (texto e links)
- ‚úÖ Relat√≥rios e hist√≥rico
- ‚úÖ Interface administrativa
- ‚úÖ Controle completo de disponibilidade dos m√∫sicos
- ‚úÖ Sistema de indisponibilidades com per√≠odos e motivos
- ‚úÖ Verifica√ß√£o autom√°tica de disponibilidade para escalas
- ‚úÖ Dashboard anal√≠tico com gr√°ficos e m√©tricas
- ‚úÖ An√°lise de missas por m√™s, m√∫sicos mais atuantes
- ‚úÖ Ranking de m√∫sicas mais usadas
- ‚úÖ Gr√°ficos de disponibilidade do coral
- ‚úÖ Monitoramento de partes da missa carentes
- ‚úÖ Sistema de escala de m√∫sicos por missa
- ‚úÖ Interface com tema escuro otimizado
- ‚úÖ Sistema de escala√ß√£o de m√∫sicos com fun√ß√µes espec√≠ficas (vocal, back vocal, instrumental, solista)
- ‚úÖ Sele√ß√£o de partes da missa para cada m√∫sico (entrada, kyrie, gloria, aclama√ß√£o, ofert√≥rio, sanctus, comunh√£o, sa√≠da)
- ‚úÖ Integra√ß√£o YouTube com busca separada de partituras
- ‚úÖ Interface aprimorada com tabs para diferentes tipos de busca
- ‚úÖ Tema claro implementado como padr√£o com melhor contraste
- ‚úÖ Cards com cantos arredondados (8px) e sombras suaves
- ‚úÖ Fundo levemente cinza-claro para melhor legibilidade
- ‚úÖ Bot√µes com contraste adequado e tipografia clara
- ‚úÖ Toggle de tema claro/escuro dispon√≠vel na sidebar
- ‚úÖ Interface otimizada para usu√°rios mais velhos

---

## üîê SISTEMA DE AUTENTICA√á√ÉO - INTEGRA√á√ÉO COMPLETA COM SUPABASE

### Como Funciona o Sistema de Autentica√ß√£o

O sistema de autentica√ß√£o da aplica√ß√£o funciona com **m√∫ltiplas camadas** que trabalham em conjunto:

#### üèóÔ∏è **Arquitetura da Autentica√ß√£o**

```
[Frontend] AuthProvider ‚Üí useApi ‚Üí apiRequest ‚Üí [Backend] auth.ts ‚Üí validateSession ‚Üí Supabase
```

**1. Frontend (Client-side):**
- `AuthProvider.tsx` - Gerencia estado global de autentica√ß√£o
- `useApi.ts` - Hook para requisi√ß√µes HTTP com token
- `LoginForm.tsx` - Interface de login

**2. Backend (Server-side):**
- `auth.ts` - Fun√ß√µes de autentica√ß√£o e valida√ß√£o
- `authRoutes.ts` - Rotas de login/logout/registro
- `authenticateToken` - Middleware de verifica√ß√£o

**3. Banco de Dados (Supabase):**
- `auth_users` - Tabela de usu√°rios
- `user_sessions` - Sess√µes ativas
- `password_reset_tokens` - Recupera√ß√£o de senha

### üîß **Fluxo Completo de Autentica√ß√£o**

#### **1. Login (Frontend ‚Üí Backend ‚Üí Supabase)**

```javascript
// 1. Usu√°rio submete formul√°rio (LoginForm.tsx)
const handleLogin = async (email, password) => {
  await login(email, password); // AuthProvider
}

// 2. AuthProvider chama API
const login = async (email, password) => {
  const response = await fetch('/api/auth/login', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ email, password })
  });
  
  const data = await response.json();
  localStorage.setItem('authToken', data.token); // CR√çTICO!
  setUser(data.user);
}

// 3. Backend valida credenciais (authRoutes.ts)
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  
  // Busca usu√°rio no Supabase
  const user = await db.select().from(authUsers).where(eq(authUsers.email, email));
  
  // Verifica senha
  const passwordValid = await verifyPassword(password, user.password);
  
  // Cria sess√£o no Supabase
  const sessionToken = await createUserSession(user.id);
  
  res.json({ user, token: sessionToken });
});

// 4. Cria sess√£o no Supabase (auth.ts)
export async function createUserSession(userId: string): Promise<string> {
  const sessionToken = crypto.randomBytes(32).toString('hex');
  const expiresAt = new Date(Date.now() + 30 * 60 * 1000); // 30min
  
  await db.insert(userSessions).values({
    userId,
    token: sessionToken,
    expiresAt,
    lastActivity: new Date()
  });
  
  return sessionToken;
}
```

#### **2. Requisi√ß√µes Autenticadas (useApi.ts)**

```javascript
// PROBLEMA COMUM: Token n√£o enviado
async function apiRequest(endpoint: string, options: RequestInit = {}) {
  const token = localStorage.getItem('authToken'); // Recupera token
  
  const response = await fetch(`/api${endpoint}`, {
    headers: {
      'Content-Type': 'application/json',
      ...(token && { 'Authorization': `Bearer ${token}` }), // ENVIA TOKEN
      ...options.headers,
    },
    ...options,
  });
  
  if (!response.ok) {
    throw new Error(`API request failed: ${response.statusText}`);
  }
  
  return response.json();
}
```

#### **3. Valida√ß√£o no Backend (auth.ts)**

```javascript
// Middleware que valida TODA requisi√ß√£o protegida
export async function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // "Bearer TOKEN"
  
  if (!token) {
    return res.status(401).json({ error: 'Token de acesso requerido' });
  }
  
  // Valida sess√£o no Supabase
  const user = await validateSession(token);
  if (!user) {
    return res.status(401).json({ error: 'Token inv√°lido ou expirado' });
  }
  
  req.user = user; // Disponibiliza dados do usu√°rio
  next();
}

// Fun√ß√£o que verifica se sess√£o existe e √© v√°lida
export async function validateSession(sessionToken: string) {
  const session = await db
    .select()
    .from(userSessions)
    .where(
      and(
        eq(userSessions.token, sessionToken),
        gt(userSessions.expiresAt, new Date()) // N√£o expirou
      )
    );
    
  if (session.length === 0) return null;
  
  // Renova sess√£o (30min)
  await db.update(userSessions)
    .set({ 
      lastActivity: new Date(),
      expiresAt: new Date(Date.now() + 30 * 60 * 1000)
    })
    .where(eq(userSessions.id, session[0].id));
    
  return getUserData(session[0].userId);
}
```

### üö® **DIAGN√ìSTICO DE PROBLEMAS COMUNS**

#### **Erro: "Token de acesso requerido" (401)**

**Causa 1: Token n√£o est√° sendo enviado**
```javascript
// ‚ùå ERRADO - sem Authorization header
fetch('/api/musicos')

// ‚úÖ CORRETO - com token
const token = localStorage.getItem('authToken');
fetch('/api/musicos', {
  headers: { 'Authorization': `Bearer ${token}` }
})
```

**Causa 2: Token n√£o foi salvo no localStorage**
```javascript
// Verificar no DevTools > Application > Local Storage
console.log('Token salvo:', localStorage.getItem('authToken'));

// Se null, o login n√£o salvou corretamente
```

**Causa 3: Token expirou (30 minutos)**
```javascript
// O sistema deveria renovar automaticamente
// Se n√£o renova, logout e login novamente
```

#### **Erro: "Token inv√°lido ou expirado"**

**Verifica√ß√µes:**
1. Token existe no localStorage?
2. Sess√£o existe na tabela `user_sessions`?
3. `expiresAt` n√£o passou?
4. `userId` na sess√£o corresponde a usu√°rio ativo?

### üîß **CONFIGURA√á√ÉO CORRETA NO SUPABASE**

#### **1. Estrutura das Tabelas de Autentica√ß√£o**

```sql
-- Usu√°rios (substitui sistema padr√£o do Supabase Auth)
CREATE TABLE auth_users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL, -- Hash bcrypt
    nome VARCHAR(255) NOT NULL,
    tipo VARCHAR(20) NOT NULL CHECK (tipo IN ('admin', 'musico')),
    instrumento VARCHAR(100),
    telefone VARCHAR(20),
    foto TEXT,
    ativo BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Sess√µes ativas (controle manual)
CREATE TABLE user_sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth_users(id),
    token VARCHAR(255) NOT NULL UNIQUE,
    expires_at TIMESTAMP NOT NULL,
    last_activity TIMESTAMP DEFAULT NOW(),
    created_at TIMESTAMP DEFAULT NOW()
);

-- Tokens de recupera√ß√£o de senha
CREATE TABLE password_reset_tokens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth_users(id),
    token VARCHAR(255) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT NOW()
);
```

#### **2. Configura√ß√£o de Pol√≠ticas RLS**

```sql
-- Habilitar Row Level Security
ALTER TABLE auth_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_sessions ENABLE ROW LEVEL SECURITY;

-- Pol√≠tica para aplica√ß√£o acessar tudo (backend controlado)
CREATE POLICY "app_access_policy" ON auth_users 
    FOR ALL USING (true);

CREATE POLICY "sessions_access_policy" ON user_sessions 
    FOR ALL USING (true);
```

#### **3. Configura√ß√£o da Connection String**

```env
# ‚ùå ERRADO - usando Supabase Auth nativo
SUPABASE_URL=https://xxx.supabase.co
SUPABASE_ANON_KEY=eyJxxx...

# ‚úÖ CORRETO - conex√£o direta PostgreSQL
DATABASE_URL=postgresql://postgres:suasenha@db.xxxxx.supabase.co:5432/postgres

# Configura√ß√µes adicionais necess√°rias
JWT_SECRET=sua_chave_secreta_jwt_muito_segura_aqui
SESSION_SECRET=sua_chave_de_sessao_muito_segura_aqui
NODE_ENV=development
PORT=5000
```

### üîÑ **FLUXO DE INICIALIZA√á√ÉO DA APLICA√á√ÉO**

#### **1. App.tsx ‚Üí AuthProvider**
```javascript
function App() {
  return (
    <AuthProvider>  {/* Inicializa contexto de auth */}
      <TooltipProvider>
        <BrowserRouter>
          <Routes>
            <Route path="/" element={<Index />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </AuthProvider>
  );
}
```

#### **2. AuthProvider ‚Üí checkAuth()**
```javascript
// Executa AUTOMATICAMENTE ao carregar app
useEffect(() => {
  checkAuth(); // Verifica se usu√°rio j√° est√° logado
}, []);

const checkAuth = async () => {
  const token = localStorage.getItem('authToken');
  if (!token) return; // N√£o logado
  
  // Valida token com backend
  const response = await fetch('/api/auth/me', {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  if (response.ok) {
    const data = await response.json();
    setUser(data.user); // Usu√°rio v√°lido
  } else {
    localStorage.removeItem('authToken'); // Token inv√°lido
  }
};
```

#### **3. Index.tsx ‚Üí Render Condicional**
```javascript
function Index() {
  const { user, loading, isAuthenticated } = useAuth();
  
  // 1. Ainda verificando autentica√ß√£o
  if (loading) return <LoadingSpinner />;
  
  // 2. N√£o autenticado - mostra login
  if (!isAuthenticated) return <LoginForm />;
  
  // 3. Autenticado - mostra aplica√ß√£o
  return <MainApplication />;
}
```

#### **4. Hooks ‚Üí useApi() ‚Üí apiRequest()**
```javascript
// TODOS os hooks (useSupabaseMissas, useSupabaseMusicos, etc.)
// usam o apiRequest que AUTOMATICAMENTE inclui o token

const { missas } = useSupabaseMissas(); // Chama fetchMissas()

const fetchMissas = async () => {
  const data = await apiRequest('/missas'); // Token inclu√≠do automaticamente
  setMissas(data);
};
```

### üõ†Ô∏è **TROUBLESHOOTING ESPEC√çFICO**

#### **Problema: "Error fetching musicos: {}"**

**1. Verificar se usu√°rio est√° logado:**
```javascript
// No DevTools Console
console.log('User:', localStorage.getItem('authToken'));
```

**2. Verificar requisi√ß√£o no Network:**
```
Request Headers:
Authorization: Bearer abc123...  // Deve estar presente
```

**3. Verificar backend logs:**
```
GET /api/musicos 401 :: {"error":"Token de acesso requerido"}
```

**4. Verificar middleware no routes.ts:**
```javascript
// routes.ts - TODAS as rotas protegidas devem ter:
router.get('/musicos', authenticateToken, async (req, res) => {
  // c√≥digo aqui
});
```

#### **Solu√ß√£o Definitiva para Erro 401:**

**1. Garantir que todas as rotas usam middleware:**
```javascript
// server/routes.ts
import { authenticateToken } from './auth';

// ‚úÖ CORRETO
router.get('/musicos', authenticateToken, getMusicosHandler);
router.get('/missas', authenticateToken, getMissasHandler);
router.post('/musicos', authenticateToken, createMusicoHandler);

// ‚ùå ERRADO - sem middleware
router.get('/musicos', getMusicosHandler);
```

**2. Verificar se token est√° sendo salvo:**
```javascript
// AuthProvider.tsx - ap√≥s login bem-sucedido
const data = await response.json();
localStorage.setItem('authToken', data.token); // CR√çTICO!
console.log('Token salvo:', data.token); // Debug
setUser(data.user);
```

**3. Verificar se apiRequest inclui token:**
```javascript
// useApi.ts
async function apiRequest(endpoint: string, options: RequestInit = {}) {
  const token = localStorage.getItem('authToken');
  
  if (!token) {
    console.error('Token n√£o encontrado no localStorage');
    throw new Error('Usu√°rio n√£o autenticado');
  }
  
  console.log('Enviando requisi√ß√£o com token:', token.substring(0, 10) + '...'); // Debug
  
  const response = await fetch(`/api${endpoint}`, {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`, // DEVE estar presente
      ...options.headers,
    },
    ...options,
  });
  
  if (!response.ok) {
    console.error('Erro na requisi√ß√£o:', response.status, response.statusText);
    throw new Error(`API request failed: ${response.statusText}`);
  }
  
  return response.json();
}
```

### ‚úÖ **CHECKLIST DE VERIFICA√á√ÉO**

- [ ] Banco Supabase criado com tabelas auth_users, user_sessions
- [ ] DATABASE_URL configurada corretamente no .env
- [ ] JWT_SECRET e SESSION_SECRET configurados
- [ ] Senha do usu√°rio admin hasheada corretamente
- [ ] AuthProvider envolvendo toda aplica√ß√£o
- [ ] localStorage salvando token ap√≥s login
- [ ] apiRequest incluindo Authorization header
- [ ] Todas as rotas protegidas usando authenticateToken middleware
- [ ] validateSession funcionando com Supabase
- [ ] Sess√µes sendo renovadas automaticamente (30min)

### üîó **LINKS √öTEIS PARA DEBUG**

```bash
# Verificar se servidor est√° rodando
curl http://localhost:5000/api/auth/me

# Testar login manualmente
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"wijosi59@gmail.com","password":"88928883"}'

# Testar rota protegida com token
curl http://localhost:5000/api/musicos \
  -H "Authorization: Bearer SEU_TOKEN_AQUI"
```

**DevTools - Application Tab:**
- Local Storage ‚Üí authToken (deve ter valor)
- Network Tab ‚Üí Headers ‚Üí Authorization (deve estar presente)
- Console ‚Üí Erros de CORS, 401, etc.

### Sistema de Disponibilidade
**Como funciona:**
- Coordenador pode registrar indisponibilidades para qualquer m√∫sico
- Motivos: F√©rias, Compromisso Pessoal, Outro (campo livre)
- Per√≠odos: Dia √∫nico ou intervalo de datas
- Integra√ß√£o: Sistema verifica automaticamente disponibilidade ao escalar missas
- Futuro: M√∫sicos poder√£o fazer auto-registro de indisponibilidades

**Hooks importantes:**
- `useApi()` - Comunica√ß√£o com backend
- `useMissas()` - Gest√£o de missas e escalas
- `useMusicos()` - Gest√£o de m√∫sicos
- `useBibliotecaMusicas()` - Biblioteca de m√∫sicas

### Estrutura do Banco
**Tabelas principais:**
- `auth_users` - Sistema de autentica√ß√£o
- `musicos` - Cadastro de m√∫sicos do coral
- `missas` - Missas programadas
- `musicas` - M√∫sicas das missas
- `biblioteca_musicas` - Biblioteca centralizada
- `musico_indisponibilidade` - Controle de aus√™ncias
- `musico_anotacoes` - Anota√ß√µes sobre m√∫sicos
- `musico_sugestoes` - Sugest√µes e aprova√ß√µes

**SQL da tabela de indisponibilidades:**
```sql
CREATE TABLE musico_indisponibilidade (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  musico_id UUID NOT NULL REFERENCES musicos(id) ON DELETE CASCADE,
  data_inicio DATE NOT NULL,
  data_fim DATE NOT NULL,
  motivo TEXT NOT NULL, -- 'ferias', 'compromisso_pessoal', 'outro'
  motivo_outro TEXT, -- quando motivo = 'outro'
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);
```

### MP3 Download Integration
- Utiliza servi√ßo CNV MP3 para converter v√≠deos YouTube
- Link autom√°tico gerado: `https://cnvmp3.com/v25/[VIDEO_ID]`
- Dispon√≠vel em todos os cards de m√∫sica com link YouTube

### Dashboard Anal√≠tico
**Gr√°ficos implementados:**
- **Missas por m√™s:** Gr√°fico de barras mostrando quantidade de missas nos √∫ltimos 6 meses
- **M√∫sicos mais atuantes:** Ranking horizontal de participa√ß√£o por m√∫sico
- **Sugest√µes por status:** Gr√°fico de pizza com pendentes, aprovadas e recusadas
- **M√∫sicas mais usadas:** Top 5 m√∫sicas mais frequentes em gr√°fico de colunas
- **Disponibilidade do coral:** Gr√°fico de linha mostrando tend√™ncias de disponibilidade
- **Partes da missa carentes:** Barras de progresso indicando preenchimento por se√ß√£o

### Sistema de Escala Musical
**Por missa, controle de:**
- Entrada, Kyrie, Gloria, Aclama√ß√£o ao Evangelho
- Ofert√≥rio, Sanctus, Comunh√£o, Sa√≠da
- Back Vocal e observa√ß√µes espec√≠ficas por parte
- Sele√ß√£o de m√∫sicos dispon√≠veis para cada fun√ß√£o
- Verifica√ß√£o autom√°tica de conflitos de disponibilidade

---

## üöÄ DEPLOY NO GITHUB PAGES

### üìã Vis√£o Geral da Estrutura

O projeto utiliza uma estrutura espec√≠fica onde o **frontend** (React/Vite) e **backend** (Express) est√£o separados:

```
projeto/
‚îú‚îÄ‚îÄ client/          # Frontend React/Vite
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ server/          # Backend Express/Node.js
‚îú‚îÄ‚îÄ dist/            # Build final (gerado pelo Vite)
‚îÇ   ‚îî‚îÄ‚îÄ public/      # Arquivos est√°ticos para deploy
‚îî‚îÄ‚îÄ package.json     # Configura√ß√µes do projeto
```

### üîß Prepara√ß√£o para GitHub Pages

#### 1. Configurar Build para Produ√ß√£o

O comando `npm run build` gera os arquivos est√°ticos em `dist/public/`:

```bash
npm run build
```

Isso cria:
```
dist/
‚îî‚îÄ‚îÄ public/          # Diret√≥rio que vai para GitHub Pages
    ‚îú‚îÄ‚îÄ index.html
    ‚îú‚îÄ‚îÄ assets/
    ‚îÇ   ‚îú‚îÄ‚îÄ index-[hash].js
    ‚îÇ   ‚îî‚îÄ‚îÄ index-[hash].css
    ‚îî‚îÄ‚îÄ [outros arquivos est√°ticos]
```

#### 2. Estrutura para GitHub Actions

Crie o arquivo `.github/workflows/deploy.yml`:

```yaml
name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build project
      run: npm run build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist/public
        cname: your-custom-domain.com  # Opcional: seu dom√≠nio customizado
```

#### 3. Configura√ß√£o do Reposit√≥rio GitHub

**Passo 1: Ativar GitHub Pages**
1. V√° em Settings > Pages
2. Source: "Deploy from a branch"
3. Branch: "gh-pages" (ser√° criada automaticamente)
4. Folder: "/ (root)"

**Passo 2: Configurar Base URL (se necess√°rio)**

Se seu reposit√≥rio n√£o est√° no dom√≠nio raiz (ex: `usuario.github.io/projeto`), adicione ao `vite.config.ts`:

```typescript
export default defineConfig({
  base: '/nome-do-seu-repositorio/', // Para GitHub Pages
  // ... resto da configura√ß√£o
});
```

#### 4. Configura√ß√£o Espec√≠fica para SPA (Single Page Application)

GitHub Pages precisa de configura√ß√£o especial para SPAs React:

**Criar `public/404.html`:**
```html
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>M√∫sica Lit√∫rgica</title>
    <script type="text/javascript">
      // Redirecionamento para SPA
      var pathSegmentsToKeep = 1;
      var l = window.location;
      l.replace(
        l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
        l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + 
        '/?/' +
        l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
        (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
        l.hash
      );
    </script>
  </head>
  <body>
  </body>
</html>
```

**Adicionar script ao `index.html`:**
```html
<!-- No <head> do client/index.html -->
<script type="text/javascript">
  (function(l) {
    if (l.search[1] === '/' ) {
      var decoded = l.search.slice(1).split('&').map(function(s) { 
        return s.replace(/~and~/g, '&')
      }).join('?');
      window.history.replaceState(null, null,
          l.pathname.slice(0, -1) + decoded + l.hash
      );
    }
  }(window.location))
</script>
```

### üîÑ Configura√ß√£o para Frontend-Only (sem Backend)

Como GitHub Pages **n√£o suporta backend**, voc√™ precisa configurar o frontend para funcionar sem servidor:

#### 1. Mock do Backend para Demo

Crie `client/src/hooks/useMockApi.ts`:

```typescript
// Hook mock para demonstra√ß√£o no GitHub Pages
export function useMockData() {
  const musicos = [
    { id: '1', nome: 'Jo√£o Silva', funcao: 'Vocal', disponivel: true },
    { id: '2', nome: 'Maria Santos', funcao: 'Viol√£o', disponivel: true }
  ];
  
  const missas = [
    { 
      id: '1', 
      data: '2024-02-04', 
      horario: '19:00', 
      tipo: 'Domingo',
      musicos: ['1', '2']
    }
  ];
  
  return { musicos, missas };
}
```

#### 2. Configurar Modo Demo

Modifique `client/src/hooks/useApi.ts`:

```typescript
// Detectar se est√° no GitHub Pages
const isGitHubPages = window.location.hostname.includes('github.io');

async function apiRequest(endpoint: string, options: RequestInit = {}) {
  if (isGitHubPages) {
    // Usar dados mock no GitHub Pages
    return getMockData(endpoint);
  }
  
  // C√≥digo normal para ambiente com backend
  const token = localStorage.getItem('authToken');
  // ... resto do c√≥digo
}
```

### üì¶ Script de Deploy Autom√°tico

Crie `scripts/deploy.js`:

```javascript
import { execSync } from 'child_process';
import fs from 'fs';

// Build do projeto
console.log('üî® Building project...');
execSync('npm run build', { stdio: 'inherit' });

// Verificar se dist/public existe
if (!fs.existsSync('dist/public')) {
  console.error('‚ùå Build failed: dist/public not found');
  process.exit(1);
}

// Adicionar arquivo CNAME se necess√°rio
const customDomain = process.env.CUSTOM_DOMAIN;
if (customDomain) {
  fs.writeFileSync('dist/public/CNAME', customDomain);
  console.log(`üìù Added CNAME: ${customDomain}`);
}

console.log('‚úÖ Build completed successfully!');
console.log('üìÅ Files ready in: dist/public/');
```

Adicionar ao `package.json`:

```json
{
  "scripts": {
    "deploy:prepare": "node scripts/deploy.js",
    "deploy:pages": "npm run deploy:prepare && gh-pages -d dist/public"
  }
}
```

### üéØ Comandos para Deploy Manual

```bash
# Instalar gh-pages (se n√£o estiver usando GitHub Actions)
npm install --save-dev gh-pages

# Build e deploy manual
npm run build
npx gh-pages -d dist/public

# Ou usar o script automatizado
npm run deploy:pages
```

### üîç Verifica√ß√£o de Deploy

**1. Checklist pr√©-deploy:**
- [ ] `npm run build` executa sem erros
- [ ] Diret√≥rio `dist/public` √© criado
- [ ] `dist/public/index.html` existe
- [ ] Assets est√£o em `dist/public/assets/`
- [ ] Arquivo `404.html` para SPA (se necess√°rio)

**2. Checklist p√≥s-deploy:**
- [ ] GitHub Pages est√° ativo em Settings
- [ ] Branch `gh-pages` foi criada
- [ ] Site est√° acess√≠vel em `usuario.github.io/repositorio`
- [ ] Navega√ß√£o entre p√°ginas funciona
- [ ] Assets carregam corretamente

### üö® Troubleshooting GitHub Pages

**Problema: "404 Page Not Found"**
- Verificar se branch `gh-pages` existe
- Confirmar se `publish_dir` no workflow est√° correto
- Verificar se `dist/public/index.html` est√° presente

**Problema: "Assets n√£o carregam"**
- Verificar `base` no vite.config.ts
- Confirmar caminhos relativos nos arquivos

**Problema: "SPA routing n√£o funciona"**
- Adicionar arquivo `404.html`
- Configurar script de redirecionamento no `index.html`

**Problema: "GitHub Action falha"**
- Verificar se `GITHUB_TOKEN` tem permiss√µes
- Confirmar se workflow est√° na branch main
- Verificar logs do Actions

### üìö Recursos Adicionais

- **GitHub Pages Docs:** https://pages.github.com/
- **Vite Static Deploy:** https://vitejs.dev/guide/static-deploy.html
- **React Router GitHub Pages:** https://create-react-app.dev/docs/deployment/#github-pages

---

## üîó ENDPOINTS DA API

### ‚ö†Ô∏è IMPORTANTE - Prefixo `/api/`

**Quando executando com servidor externo (ex: GitHub Pages + servidor pr√≥prio)**, todos os endpoints precisam do prefixo `/api/`:

```javascript
// ‚ùå ERRADO - ambiente local/desenvolvimento
get('/musicos')

// ‚úÖ CORRETO - ambiente com servidor externo
get('/api/musicos')
```

### üìã Lista Completa de Endpoints

#### **üîê Autentica√ß√£o**
```
POST   /api/auth/login          # Login de usu√°rio
POST   /api/auth/logout         # Logout de usu√°rio
POST   /api/auth/register       # Registro de novo usu√°rio
GET    /api/auth/me             # Dados do usu√°rio logado
POST   /api/auth/forgot-password # Recupera√ß√£o de senha
POST   /api/auth/reset-password  # Reset de senha
```

#### **üë• M√∫sicos**
```
GET    /api/musicos             # Listar todos os m√∫sicos
POST   /api/musicos             # Criar novo m√∫sico
PUT    /api/musicos/:id         # Atualizar m√∫sico espec√≠fico
DELETE /api/musicos/:id         # Excluir m√∫sico espec√≠fico
```

#### **üìÖ Missas**
```
GET    /api/missas              # Listar todas as missas
POST   /api/missas              # Criar nova missa
PUT    /api/missas/:id          # Atualizar missa espec√≠fica
DELETE /api/missas/:id          # Excluir missa espec√≠fica
```

#### **üéµ M√∫sicas das Missas**
```
GET    /api/missas/:id/musicas  # Listar m√∫sicas de uma missa
POST   /api/musicas             # Adicionar m√∫sica a uma missa
DELETE /api/musicas/:id         # Remover m√∫sica de uma missa
```

#### **üìö Biblioteca de M√∫sicas**
```
GET    /api/biblioteca-musicas  # Listar biblioteca completa
POST   /api/biblioteca-musicas  # Adicionar m√∫sica √† biblioteca
DELETE /api/biblioteca-musicas/:id # Remover m√∫sica da biblioteca
```

#### **üìù Escala√ß√£o de M√∫sicos (Missa-M√∫sicos)**
```
GET    /api/missa-musicos/:missaId # M√∫sicos escalados para uma missa
POST   /api/missa-musicos       # Escalar m√∫sico para missa
DELETE /api/missa-musicos/:id   # Remover m√∫sico da escala√ß√£o
```

#### **‚ùå Indisponibilidades**
```
GET    /api/indisponibilidades  # Listar todas as indisponibilidades
GET    /api/musicos/:id/indisponibilidades # Indisponibilidades de um m√∫sico
POST   /api/indisponibilidades  # Criar nova indisponibilidade
PUT    /api/indisponibilidades/:id # Atualizar indisponibilidade
DELETE /api/indisponibilidades/:id # Excluir indisponibilidade
```

#### **üìã Anota√ß√µes dos M√∫sicos**
```
GET    /api/musicos/:id/anotacoes # Anota√ß√µes de um m√∫sico
POST   /api/musicos/:id/anotacoes # Criar anota√ß√£o para m√∫sico
DELETE /api/anotacoes/:id       # Excluir anota√ß√£o espec√≠fica
```

#### **üí° Sugest√µes dos M√∫sicos**
```
GET    /api/musicos/:id/sugestoes # Sugest√µes de um m√∫sico
POST   /api/musicos/:id/sugestoes # Criar sugest√£o para m√∫sico
PUT    /api/sugestoes/:id        # Atualizar status da sugest√£o
```

#### **üìä Analytics/Relat√≥rios**
```
GET    /api/analytics            # Dados para dashboard anal√≠tico
```

#### **üîç Busca de M√∫sicas**
```
GET    /api/search/music?q=termo # Buscar m√∫sicas no YouTube
POST   /api/search/youtube-to-mp3 # Gerar link MP3 do YouTube
```

### üîß Configura√ß√£o para Diferentes Ambientes

#### **Ambiente Local (Replit/Desenvolvimento)**
```javascript
// useApi.ts - configura√ß√£o local
const BASE_URL = ''; // Sem prefixo

async function apiRequest(endpoint: string) {
  const response = await fetch(`${BASE_URL}${endpoint}`, {
    // ...configura√ß√µes
  });
}

// Uso: get('/musicos') ‚Üí GET /musicos
```

#### **Ambiente com Servidor Externo (GitHub Pages + API)**
```javascript
// useApi.ts - configura√ß√£o para servidor externo
const BASE_URL = '/api'; // Com prefixo /api

async function apiRequest(endpoint: string) {
  const response = await fetch(`${BASE_URL}${endpoint}`, {
    // ...configura√ß√µes
  });
}

// Uso: get('/musicos') ‚Üí GET /api/musicos
```

#### **Configura√ß√£o Autom√°tica por Ambiente**
```javascript
// useApi.ts - detec√ß√£o autom√°tica
const isGitHubPages = window.location.hostname.includes('github.io');
const isExternalServer = window.location.hostname !== 'localhost';
const BASE_URL = (isGitHubPages || isExternalServer) ? '/api' : '';

async function apiRequest(endpoint: string) {
  const fullUrl = `${BASE_URL}${endpoint}`;
  console.log('Fazendo requisi√ß√£o para:', fullUrl); // Debug
  
  const response = await fetch(fullUrl, {
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    },
    ...options,
  });
}
```

### üö® Endpoints que Requerem Autentica√ß√£o

**Todos os endpoints marcados com [üîí] exigem token de autentica√ß√£o:**

```javascript
// Headers obrigat√≥rios para endpoints protegidos
headers: {
  'Authorization': 'Bearer seu_token_aqui',
  'Content-Type': 'application/json'
}
```

**Lista de endpoints protegidos:**
- `[üîí] GET /api/musicos`
- `[üîí] POST /api/musicos` (apenas admin)
- `[üîí] GET /api/missa-musicos/:missaId`
- `[üîí] POST /api/missa-musicos`
- `[üîí] DELETE /api/missa-musicos/:id`
- `[üîí] GET /api/indisponibilidades`
- `[üîí] GET /api/musicos/:id/indisponibilidades`
- `[üîí] POST /api/indisponibilidades` (apenas admin)
- `[üîí] PUT /api/indisponibilidades/:id` (apenas admin)
- `[üîí] DELETE /api/indisponibilidades/:id` (apenas admin)
- `[üîí] GET /api/analytics`
- `[üîí] GET /api/search/music`
- `[üîí] POST /api/search/youtube-to-mp3`

### üõ†Ô∏è Exemplo de Implementa√ß√£o

```javascript
// hooks/useApi.ts - implementa√ß√£o completa
export function useApi() {
  const isExternalServer = window.location.hostname !== 'localhost' && 
                           !window.location.hostname.includes('127.0.0.1');
  const BASE_URL = isExternalServer ? '/api' : '';
  
  async function apiRequest(endpoint: string, options: RequestInit = {}) {
    const token = localStorage.getItem('authToken');
    const fullUrl = `${BASE_URL}${endpoint}`;
    
    const response = await fetch(fullUrl, {
      headers: {
        'Content-Type': 'application/json',
        ...(token && { 'Authorization': `Bearer ${token}` }),
        ...options.headers,
      },
      ...options,
    });
    
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    
    return response.json();
  }
  
  return {
    get: (endpoint: string) => apiRequest(endpoint),
    post: (endpoint: string, data: any) => apiRequest(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    }),
    put: (endpoint: string, data: any) => apiRequest(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    }),
    delete: (endpoint: string) => apiRequest(endpoint, {
      method: 'DELETE',
    }),
  };
}
```

---

## üìû Suporte
Para d√∫vidas ou problemas, consulte:
- Documenta√ß√£o do projeto no reposit√≥rio
- Logs da aplica√ß√£o em `logs/`
- Console do navegador para erros frontend